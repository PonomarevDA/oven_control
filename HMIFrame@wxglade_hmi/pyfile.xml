<?xml version='1.0' encoding='utf-8'?>
<PyFile xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <variables>
    <variable name="is_source_turned_on" type="BOOL" initial="0"/>
    <variable name="is_system_turned_on" type="BOOL" initial="0"/>
    <variable name="desired_first_temperature" type="REAL" initial="0"/>
    <variable name="desired_second_temperature" type="REAL" initial="0"/>
    <variable name="desired_first_holding" type="REAL" initial="0"/>
    <variable name="desired_second_holding" type="REAL" initial="0"/>
    <variable name="is_start_btn_pressed" type="BOOL" initial="0"/>
    <variable name="is_hold_btn_pressed" type="BOOL" initial="0"/>
    <variable name="is_stop_btn_pressed" type="BOOL" initial="0"/>
    <variable name="is_reset_btn_pressed" type="BOOL" initial="0"/>
    <variable name="is_object_in_first_area" type="BOOL" initial="1"/>
    <variable name="is_object_between_areas" type="BOOL" initial="0"/>
    <variable name="is_object_in_second_area" type="BOOL" initial="0"/>
    <variable name="first_current" type="REAL" initial="0"/>
    <variable name="second_current" type="REAL" initial="0"/>
    <variable name="first_temperature" type="REAL" initial="24"/>
    <variable name="second_temperature" type="REAL" initial="24"/>
  </variables>
  <globals>
    <xhtml:p><![CDATA[
import ctypes
import wx, sys

TIMER_ID = 99

class CustomWidget(wx.StaticText):
    def __init__(self, *args, **kwargs):
        self.initialized = False
        super(CustomWidget, self).__init__(*args, **kwargs)
        self.Message = None

# Buttons events
def power_btn_handler(self, event):
    setattr(PLCGlobals,"is_source_turned_on", self.power_btn.GetValue())
def start_system_btn_handler(self, event):
    setattr(PLCGlobals,"is_system_turned_on", self.start_system_btn.GetValue())
def start_btn_handler(event):
    setattr(PLCGlobals,"is_start_btn_pressed", True)
def hold_btn_handler(event):
    setattr(PLCGlobals,"is_hold_btn_pressed", True)
def stop_btn_handler(event):
    setattr(PLCGlobals,"is_stop_btn_pressed", True)
def reset_btn_handler(event):
    setattr(PLCGlobals,"is_reset_btn_pressed", True)
    

counter = 0
def OnTimer(self, event):
    """ This timer event update all display object """
    # 1. Update timer
    global counter
    HMIFrame.text_current_time.SetValue(str(float(counter)/10) + " sec")
    counter += 1

    # 2. Update displays currents
    text = str(getattr(PLCGlobals,"first_current")) + " A"
    HMIFrame.text_first_current.SetValue(text)
    text = str(getattr(PLCGlobals,"second_current")) + " A"
    HMIFrame.text_second_current.SetValue(text)

    # 3. Update displays temperatures
    text = str(getattr(PLCGlobals,"first_temperature")) + " C"
    HMIFrame.text_first_temperature.SetValue(text)
    text = str(getattr(PLCGlobals,"second_temperature")) + " C"
    HMIFrame.text_second_temperature.SetValue(text)

    # 4. Update displays object position
    text = getattr(PLCGlobals,"is_object_in_first_area")
    HMIFrame.checkbox_is_first_area.SetValue(text)
    text = getattr(PLCGlobals,"is_object_between_areas")
    HMIFrame.checkbox_is_between_areas.SetValue(text)
    text = getattr(PLCGlobals,"is_object_in_second_area")
    HMIFrame.checkbox_is_second_area.SetValue(text)

    # 5. Update control desied temperatures
    text = HMIFrame.spin_first_temperature.GetValue()
    setattr(PLCGlobals,"desired_first_temperature", float(text))
    text = HMIFrame.spin_second_temperature.GetValue()
    setattr(PLCGlobals,"desired_second_temperature", float(text))

    # 6. Update control desied durations
    text = HMIFrame.spin_first_area_duration.GetValue()
    setattr(PLCGlobals,"desired_first_holding", float(text))
    text = HMIFrame.spin_second_area_duration.GetValue()
    setattr(PLCGlobals,"desired_second_holding", float(text))

InitBaseHMI = Class_HMIFrame.__init__
Class_HMIFrame.OnTimer = OnTimer
Class_HMIFrame.power_btn_handler = power_btn_handler
Class_HMIFrame.start_system_btn_handler = start_system_btn_handler
def InitHMI(self,*args,**kargs):
    InitBaseHMI(self, *args,**kargs)
    print('Initialisation changed!')
    self.SetSize((700, 400))
    self.SetTitle("Nex HMI")

    print('\Init buttons:')
    self.Bind(wx.EVT_CHECKBOX, self.power_btn_handler, self.power_btn)
    self.Bind(wx.EVT_CHECKBOX, self.start_system_btn_handler, self.start_system_btn)
    self.Bind(wx.EVT_BUTTON, start_btn_handler, self.start_btn)
    self.Bind(wx.EVT_BUTTON, hold_btn_handler, self.hold_btn)
    self.Bind(wx.EVT_BUTTON, stop_btn_handler, self.stop_btn)
    self.Bind(wx.EVT_BUTTON, reset_btn_handler, self.reset_btn)

    print('\Init timer:')
    self.timer = wx.Timer(self, TIMER_ID)
    self.Bind(wx.EVT_TIMER, self.OnTimer, self.timer)
    try:
        self.timer.Start(100)
    except:
        print('There is some bug where it is trying to start timer.')

Class_HMIFrame.__init__ = InitHMI

]]></xhtml:p>
  </globals>
  <init>
    <xhtml:p><![CDATA[
]]></xhtml:p>
  </init>
  <cleanup>
    <xhtml:p><![CDATA[
]]></xhtml:p>
  </cleanup>
  <start>
    <xhtml:p><![CDATA[
]]></xhtml:p>
  </start>
  <stop>
    <xhtml:p><![CDATA[
]]></xhtml:p>
  </stop>
</PyFile>
