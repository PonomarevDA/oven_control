<?xml version='1.0' encoding='utf-8'?>
<project xmlns:ns1="http://www.plcopen.org/xml/tc6_0201" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Неизвестно" productName="Unnamed" productVersion="1" creationDateTime="2019-12-05T21:38:19"/>
  <contentHeader name="Unnamed" modificationDateTime="2019-12-12T00:06:29">
    <coordinateInfo>
      <fbd>
        <scaling x="0" y="0"/>
      </fbd>
      <ld>
        <scaling x="0" y="0"/>
      </ld>
      <sfc>
        <scaling x="0" y="0"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="Mode_t">
        <baseType>
          <enum>
            <values>
              <value name="inactive"/>
              <value name="started"/>
              <value name="holded"/>
              <value name="stopped"/>
            </values>
          </enum>
        </baseType>
        <initialValue>
          <simpleValue value="inactive"/>
        </initialValue>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="main" pouType="program">
        <interface>
          <externalVars>
            <variable name="is_first_source_turned_on">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_second_source_turned_on">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_object_in_first_area">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_object_between_areas">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_object_in_second_area">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="cmd_move_object">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_system_turned_on">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="desired_first_temperature">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="desired_second_temperature">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="desired_first_holding">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="desired_second_holding">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="is_start_btn_pressed">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_hold_btn_pressed">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_stop_btn_pressed">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="first_temperature">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="second_temperature">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="mode">
              <type>
                <derived name="Mode_t"/>
              </type>
            </variable>
            <variable name="desired_first_current">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="desired_second_current">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="work_counter">
              <type>
                <DINT/>
              </type>
            </variable>
          </externalVars>
          <localVars>
            <variable name="delay_counter">
              <type>
                <DINT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="TASK_PERIOD_MS">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="20"/>
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="FIRST_PERIOD_END_TICKS">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="SECOND_PERIOD_END_TICKS">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="THIRD_PERIOD_END_TICKS">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="dummy_time">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="T#0D_0H_0M_0S_1MS"/>
              </initialValue>
            </variable>
            <variable name="pid1">
              <type>
                <derived name="PID"/>
              </type>
            </variable>
            <variable name="pid2">
              <type>
                <derived name="PID"/>
              </type>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="K_P">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="0.001"/>
              </initialValue>
            </variable>
            <variable name="K_I">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="0.0001"/>
              </initialValue>
            </variable>
            <variable name="K_D">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="0.001"/>
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="des1">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="des2">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="now1">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="now2">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* 
@brief Define mode: process btn pressing
*)
if is_first_source_turned_on = true and is_second_source_turned_on = true and is_system_turned_on = true then
  if is_start_btn_pressed = true then
    mode := started;
  elsif is_hold_btn_pressed = true then
    mode := holded;
  elsif is_stop_btn_pressed = true then
    mode := stopped;
  end_if;
else
  mode := inactive;
end_if;
is_start_btn_pressed := false;
is_hold_btn_pressed := false;
is_stop_btn_pressed := false;

(* Calculate desired control parameters in this moment *)
FIRST_PERIOD_END_TICKS := 10*(1000/TASK_PERIOD_MS) + DINT_TO_INT(delay_counter);
SECOND_PERIOD_END_TICKS := FIRST_PERIOD_END_TICKS + (REAL_TO_INT(desired_first_holding))*(1000/TASK_PERIOD_MS);
THIRD_PERIOD_END_TICKS := SECOND_PERIOD_END_TICKS + (REAL_TO_INT(desired_second_holding))*(1000/TASK_PERIOD_MS);

(* 
@brief Process timer
@note It uses to define which temperature should be used now.
*)
if mode = started then
  work_counter := work_counter + 1;
elsif mode = stopped or mode = inactive then
  work_counter := 0;
  delay_counter := 0;
end_if;

(* 
@brief Process object moving
@note Send command to move object and hold process while object is moving
*)
if work_counter < INT_TO_DINT(SECOND_PERIOD_END_TICKS) then
  cmd_move_object := false;
elsif work_counter = INT_TO_DINT(SECOND_PERIOD_END_TICKS) and is_object_in_first_area = true then
  cmd_move_object := true;
elsif work_counter = INT_TO_DINT(SECOND_PERIOD_END_TICKS) and is_object_in_second_area = true then
  cmd_move_object := false;
elsif work_counter = INT_TO_DINT(THIRD_PERIOD_END_TICKS) and is_object_in_second_area = true then
  cmd_move_object := true;
elsif work_counter = INT_TO_DINT(THIRD_PERIOD_END_TICKS) and is_object_in_second_area = false then
  cmd_move_object := false;
end_if;

if cmd_move_object = true then
  delay_counter := delay_counter + 1;
end_if;


(* 
@brief Calculate parameters with PID (desired first and second currents)
*)
now1 := first_temperature;
now2 := second_temperature;
if mode = started or mode = holded then
  if work_counter < INT_TO_DINT(FIRST_PERIOD_END_TICKS) and is_object_in_first_area = true then
    des1 := calc_desired_tmp(work_counter, 0, INT_TO_DINT(FIRST_PERIOD_END_TICKS), 24.0, 100.0);
    des2 := des1;
  elsif work_counter < INT_TO_DINT(SECOND_PERIOD_END_TICKS) and is_object_in_first_area = true then
    des1 := calc_desired_tmp(work_counter, INT_TO_DINT(FIRST_PERIOD_END_TICKS), INT_TO_DINT(SECOND_PERIOD_END_TICKS), 100.0, desired_first_temperature);
    des2 := des1;
  elsif (work_counter >= INT_TO_DINT(SECOND_PERIOD_END_TICKS)) and 
        (is_object_between_areas = true or is_object_in_first_area = true) then
    des1 := desired_first_temperature;
    des2 := desired_first_temperature;
  elsif work_counter < INT_TO_DINT(THIRD_PERIOD_END_TICKS) and is_object_in_second_area = true then
    des1 := desired_first_temperature;
    des2 := calc_desired_tmp(work_counter, INT_TO_DINT(SECOND_PERIOD_END_TICKS), INT_TO_DINT(THIRD_PERIOD_END_TICKS), desired_first_temperature, desired_second_temperature);
  else
    mode := stopped;
  end_if;
  pid1(true, des1, now1, 0.0, K_P, K_I, K_D, dummy_time, desired_first_current);
  pid2(true, des2, now2, 0.0, K_P, K_I, K_D, dummy_time, desired_second_current);
elsif mode = stopped then
  pid1(true, 24.0, now1, 0.0, K_P, K_I, K_D, dummy_time, desired_first_current);
  pid2(true, 24.0, now2, 0.0, K_P, K_I, K_D, dummy_time, desired_second_current);
end_if;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="simulation" pouType="program">
        <interface>
          <externalVars>
            <variable name="is_source_turned_on">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_system_turned_on">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_reset_btn_pressed">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="raw_first_current">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="raw_second_current">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="raw_first_temperature">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="raw_second_temperature">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="is_first_source_turned_on">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_second_source_turned_on">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_object_in_first_area">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_object_between_areas">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_object_in_second_area">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="pwm_first_current">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="pwm_second_current">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="cmd_move_object">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="MAX_CURRENT_VALUE">
              <type>
                <INT/>
              </type>
            </variable>
          </externalVars>
          <localVars>
            <variable name="real_temp_var">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="PWM_TO_TEMPERATURE">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="40.0"/>
              </initialValue>
            </variable>
          </localVars>
          <externalVars>
            <variable name="work_counter">
              <type>
                <DINT/>
              </type>
            </variable>
          </externalVars>
          <localVars>
            <variable name="counter">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[if is_source_turned_on = true then
  (* 1. Simulate that sources turned on*)
  is_first_source_turned_on := true;
  is_second_source_turned_on := true;
  
  (* 2. Simulate currents *)
  real_temp_var := INT_TO_REAL(MAX_CURRENT_VALUE) * 0.01;
  raw_first_current := REAL_TO_INT(pwm_first_current * real_temp_var);
  raw_second_current := REAL_TO_INT(pwm_second_current * real_temp_var);
  
  (* 3. Simulate temperatures *)
  raw_first_temperature := 24 + REAL_TO_INT(PWM_TO_TEMPERATURE * pwm_first_current);
  raw_second_temperature := 24 + REAL_TO_INT(PWM_TO_TEMPERATURE * pwm_second_current);
  
  (* 4. Simulate object moving *)
  if cmd_move_object = true then
    counter := counter + 1;
    if counter > 275 then
      if is_object_in_first_area = true then
        is_object_in_first_area := false;
        is_object_between_areas := true;
      elsif is_object_between_areas = true then
        is_object_between_areas := false;
        is_object_in_second_area := true;
      elsif is_object_in_second_area = true then
        is_object_in_second_area := false;
        is_object_in_first_area := true;
      end_if;
      counter := 0;
    end_if;
  else
    counter := 0;
  end_if;

  (* 5. Simulate reset process *)
  if is_reset_btn_pressed = true then
    is_reset_btn_pressed := false;
    is_object_in_first_area := true;
    is_object_between_areas := false;
    is_object_in_second_area := false;
  end_if;
  
  
  (* 6. Make drift *)
  if mod(work_counter, 2) = 1 then
    raw_first_current := REAL_TO_INT(INT_TO_REAL(raw_first_current) * 1.01);
  elsif mod(work_counter, 3) = 1 then
    raw_first_current := REAL_TO_INT(INT_TO_REAL(raw_first_current) * 0.98);
  elsif mod(work_counter, 5) = 1 then
    raw_first_current := REAL_TO_INT(INT_TO_REAL(raw_first_current) * 1.03);
  elsif mod(work_counter, 7) = 1 then
    raw_first_current := REAL_TO_INT(INT_TO_REAL(raw_first_current) * 0.97);
  elsif mod(work_counter, 11) = 1 then
    raw_first_current := REAL_TO_INT(INT_TO_REAL(raw_first_current) * 1.04);
  end_if;
else
  is_first_source_turned_on := false;
  is_second_source_turned_on := false;
end_if;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="receive_signals" pouType="program">
        <interface>
          <externalVars>
            <variable name="raw_first_current">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="raw_second_current">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="raw_first_temperature">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="raw_second_temperature">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="is_first_source_turned_on">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_second_source_turned_on">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_object_in_first_area">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_object_between_areas">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="is_object_in_second_area">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="first_current">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="second_current">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="first_temperature">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="second_temperature">
              <type>
                <REAL/>
              </type>
            </variable>
          </externalVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* 1. Parse current data *)
first_current := INT_TO_REAL(raw_first_current);
second_current := INT_TO_REAL(raw_second_current);

(* 2. Parse temperature data *)
first_temperature := INT_TO_REAL(raw_first_temperature);
second_temperature := INT_TO_REAL(raw_second_temperature);

(* 3. Parse object position *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="transmite_signals" pouType="program">
        <interface>
          <externalVars>
            <variable name="pwm_first_current">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="pwm_second_current">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="cmd_move_object">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="cmd_enable_first_source">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="cmd_enable_second_source">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="desired_first_current">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="desired_second_current">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="MAX_CURRENT_VALUE">
              <type>
                <INT/>
              </type>
            </variable>
          </externalVars>
          <localVars>
            <variable name="real_temp_var">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[real_temp_var := DIV(desired_first_current, INT_TO_REAL(MAX_CURRENT_VALUE));
pwm_first_current := real_temp_var * 100.0;

real_temp_var := DIV(desired_second_current, INT_TO_REAL(MAX_CURRENT_VALUE));
pwm_second_current := real_temp_var * 100.0;

(* Transmit move_object_cmd here*)
]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="calc_desired_tmp" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="crnt_time">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="t1">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="t2">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="var1">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="var2">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[calc_desired_tmp := var1 + (var2 - var1) * DINT_TO_REAL(crnt_time - t1) / DINT_TO_REAL(t2  - t1);
return;]]></xhtml:p>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="config">
        <resource name="resource1">
          <task name="task0" priority="0" interval="T#20ms">
            <pouInstance name="instance0" typeName="main"/>
            <pouInstance name="instance2" typeName="simulation"/>
            <pouInstance name="instance3" typeName="receive_signals"/>
            <pouInstance name="instance4" typeName="transmite_signals"/>
          </task>
        </resource>
        <globalVars>
          <variable name="raw_first_current">
            <type>
              <INT/>
            </type>
          </variable>
          <variable name="raw_second_current">
            <type>
              <INT/>
            </type>
          </variable>
          <variable name="raw_first_temperature">
            <type>
              <INT/>
            </type>
          </variable>
          <variable name="raw_second_temperature">
            <type>
              <INT/>
            </type>
          </variable>
          <variable name="is_first_source_turned_on">
            <type>
              <BOOL/>
            </type>
          </variable>
          <variable name="is_second_source_turned_on">
            <type>
              <BOOL/>
            </type>
          </variable>
          <variable name="pwm_first_current">
            <type>
              <REAL/>
            </type>
          </variable>
          <variable name="pwm_second_current">
            <type>
              <REAL/>
            </type>
          </variable>
          <variable name="cmd_move_object">
            <type>
              <BOOL/>
            </type>
            <initialValue>
              <simpleValue value="0"/>
            </initialValue>
          </variable>
          <variable name="cmd_enable_first_source">
            <type>
              <BOOL/>
            </type>
          </variable>
          <variable name="cmd_enable_second_source">
            <type>
              <BOOL/>
            </type>
          </variable>
          <variable name="mode">
            <type>
              <derived name="Mode_t"/>
            </type>
            <initialValue>
              <simpleValue value="stopped"/>
            </initialValue>
          </variable>
          <variable name="desired_first_current">
            <type>
              <REAL/>
            </type>
            <initialValue>
              <simpleValue value="0"/>
            </initialValue>
          </variable>
          <variable name="desired_second_current">
            <type>
              <REAL/>
            </type>
            <initialValue>
              <simpleValue value="0"/>
            </initialValue>
          </variable>
          <variable name="work_counter">
            <type>
              <DINT/>
            </type>
            <initialValue>
              <simpleValue value="0"/>
            </initialValue>
          </variable>
          <variable name="MAX_CURRENT_VALUE">
            <type>
              <INT/>
            </type>
            <initialValue>
              <simpleValue value="3000"/>
            </initialValue>
          </variable>
        </globalVars>
      </configuration>
    </configurations>
  </instances>
</project>
